services:
  # Consul
  consul:
    image: gliderlabs/consul-server:latest
    command: "-server -bootstrap"
    ports:
      - 80:8500
    networks:
      2immerse:
        aliases:
          - consul.service.consul


  registrator:
    image: gliderlabs/registrator:master
    command: "consul://consul:8500"
    depends_on:
      - consul
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock"
    networks:
      - 2immerse

  mqttbroker:
    image: eclipse-mosquitto:1.6.15
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
    depends_on:
      - registrator
    labels:
      - "SERVICE_NAME=mqttbroker"
    networks:
      2immerse:
        aliases:
          - mqttbroker.service.consul

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    depends_on:
      - registrator
    labels:
      - "SERVICE_NAME=redis"
    networks:
      2immerse:
        aliases:
          - redis.service.consul

  telegraf:
    build:
      context: ./telegraf
      dockerfile: Dockerfile
    environment:
      INFLUX_URL: "${INFLUX_URL}"
      INFLUX_TOKEN: "${INFLUX_TOKEN}"
      CLOUD_SYNC_INSTANCE_NAME: ${INSTANCE_NAME}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./telegraf/cloud-sync.conf:/etc/telegraf/telegraf.conf:ro
    depends_on:
      influxdb:
        condition: service_healthy
    labels:
      - "SERVICE_NAME=telegraf"
    networks:
      2immerse:
        aliases:
          - telegraf.service.consul
    user: telegraf

  wallclockservice:
    build: ./wallclock-service
    image: wallclockservice
    ports:
      - "6677:6677/udp"
      - "6676:6676"
      - "6675:80"
    labels:
      - "SERVICE_NAME=wallclock-service"
    depends_on:
      - registrator
    networks:
      2immerse:
        aliases:
          - wallclock-service.service.consul
    restart: unless-stopped

  sessioncontroller:
    build:
      context: ./src
      dockerfile: sessioncontroller/Dockerfile
    image: sessioncontroller
    ports:
      - 4002:4002
    command: npm start
    volumes:
      - ./src/sessioncontroller/src:/usr/src/sessioncontroller/src
      - ./src/sessioncontroller/log:/usr/src/sessioncontroller/log
    depends_on:
      - registrator
      - mqttbroker
      - wallclockservice
    labels:
      - "SERVICE_NAME=sessioncontroller"
    environment:
      WALLCLOCK_SERVICE_WS_URL:  ${WALLCLOCK_SERVICE_WS_URL}
      ENABLE_INFLUX_DB_WRITE: ${STATS_WRITE_FLAG}
      CLOUD_SYNC_INSTANCE_NAME: ${INSTANCE_NAME}
    restart: unless-stopped
    networks:
      2immerse:
        aliases:
          - sessioncontroller.service.consul

  synccontroller:
    build:
      context: ./src
      dockerfile: synccontroller/Dockerfile
    image: synccontroller
    ports:
      - "3002"
    command: npm start
    volumes:
      - ./src/synccontroller/src:/usr/src/synccontroller/src
      - ./src/synccontroller/log:/usr/src/synccontroller/log
    depends_on:
      - registrator
      - mqttbroker
      - redis
      - wallclockservice
    labels:
      - "SERVICE_NAME=synccontroller"
    environment:
      WALLCLOCK_SERVICE_WS_URL: ${WALLCLOCK_SERVICE_WS_URL}
      ENABLE_INFLUX_DB_WRITE: ${STATS_WRITE_FLAG}
      CLOUD_SYNC_INSTANCE_NAME: ${INSTANCE_NAME}
    restart: unless-stopped
    networks:
      2immerse:
        aliases:
          - synccontroller.service.consul

  statscontroller:
    build:
      context: ./src
      dockerfile: statscontroller/Dockerfile
    image: statscontroller
    ports:
      - 4001:4001
      - 5855:5855
    command: npm start
    volumes:
      - ./src/statscontroller/src:/usr/src/statscontroller/src
      - ./src/statscontroller/log:/usr/src/statscontroller/log
    depends_on:
      - registrator
      - mqttbroker
      - redis
      - wallclockservice
    labels:
      - "SERVICE_NAME=statscontroller"
    environment:
        WALLCLOCK_SERVICE_WS_URL: ${WALLCLOCK_SERVICE_WS_URL}
        ENABLE_INFLUX_DB_WRITE: ${STATS_WRITE_FLAG}
        STATS_WRITE_INTERVAL_SECS: ${STATS_WRITE_INTERVAL_SECS}
        CLOUD_SYNC_INSTANCE_NAME: ${INSTANCE_NAME}
        INFLUX_URL: "${INFLUX_URL}"
        INFLUX_TOKEN: "${INFLUX_TOKEN}"
    restart: unless-stopped
    networks:
      2immerse:
        aliases:
          - statscontroller.service.consul

  timelineobserver:
    build: src/timelineobserver/TimelineObserver/
    image: timelineobserver
    command: -r consul:8500 -d redis -b mqttbroker -t Sessions/+/timelines/+/state
    depends_on:
      - registrator
      - mqttbroker
      - redis
      - synccontroller
    labels:
      - "SERVICE_NAME=timelineobserver"
    environment:
        CONSUL_URL: localhost:8500
        ENABLE_INFLUX_DB_WRITE: ${STATS_WRITE_FLAG}
        CLOUD_SYNC_INSTANCE_NAME: ${INSTANCE_NAME}
    restart: unless-stopped
    networks:
      2immerse:
        aliases:
          - timelineobserver.service.consul

  synchronisedvideo:
    build: examples/synchronisedvideo
    image: synchronisedvideo
    volumes:
      - ./examples/synchronisedvideo/src:/usr/src/app/src
      - ./examples/synchronisedvideo/logs:/usr/src/app/logs
      - ./examples/synchronisedvideo/media:/usr/src/app/media
      - ./examples/synchronisedvideo/config:/usr/src/app/config
      - ./dist:/usr/src/app/dist
    ports:
      - 3000:3000
    depends_on:
      - sessioncontroller
    labels:
      - "SERVICE_NAME=synchronisedvideo"
    networks:
      2immerse:
        aliases:
          - synchronisedvideo.service.consul
    command: sh -c "mkdir -p www/css && npm run build && node server.js"

  influxdb:
      image: influxdb:2.0
      ports:
        - "8086:8086"
      volumes:
        - influxdb-data:/var/lib/influxdb2
        - ./influxdb-cache:/home/influxdb/.cache/snowflake
      environment:
        - DOCKER_INFLUXDB_INIT_MODE=setup
        - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME}
        - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
        - DOCKER_INFLUXDB_INIT_ORG=BBC
        - DOCKER_INFLUXDB_INIT_BUCKET=CloudSync
        - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUX_TOKEN}
      networks:
        2immerse:
          aliases:
            - influxdb.service.consul
      healthcheck:
        test: ["CMD", "influx", "ping"]
        interval: 10s
        timeout: 3s
        retries: 3
      user: influxdb

networks:
  2immerse:
     driver: bridge

volumes:
  influxdb-data:

